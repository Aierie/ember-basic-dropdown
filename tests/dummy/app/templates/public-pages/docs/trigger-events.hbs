<h1 class="doc-page-title">Trigger events</h1>

<p>
  As with the previous component, the events fired are named after the DOM events
  that trigger them, but camelcased.
  accepts a lot of actions whose name is <code>on&lt;EventName&gt;></code>.
</p>

<p>
  Therefore, <code>mousedown</code> events will fire the <code>onMouseDown</code>,
  <code>keydown</code> events will fire <code>onKeyDown</code> and so on.
</p>

<p>
  Let's see some examples.
</p>

<h3><code>onKeyDown(dropdown, event)</code></h3>

<p>
  One real world situation where I found this to be neccessary, is when you want to
  open the dropdown with a key that usually does not open it, like by example
  the arrow keys.
</p>

{{#code-sample hbs="trigger-events-1.hbs" js="trigger-events-1-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-sample}}

<p>
  As with any other event, returning <code>false</code> will prevent the default behaviour,
  so you can use this action to prevent the <kbd>space</kbd>, <kbd>enter</kbd> and <kbd>esc</kbd>
  keys from doing what they do by default.
</p>

<h3><code>onMouseDown(dropdown, event)</code></h3>

<p>
  The <code>mousedown</code> event is the one that usually opens the dropdown,
  but you can pass your own function.
</p>

<p>
  Good examples of this are preventing the component from opening with the mouse and/or
  react in some way to those attempts.
</p>

{{#code-sample hbs="trigger-events-2.hbs" js="trigger-events-2-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-sample}}

<h3><code>onTouchEnd(dropdown, event)</code></h3>

<p>
  Exactly identical to <code>onMouseDown</code> but for touch screens. I'm not even going
  to create another example.
</p>

<h3><code>onMouseEnter/onMouseLeave(dropdown, event)</code></h3>

<p>
  I use this event to open the dropdown when you hover it and close it when you leave but
  you can really use it a lot more.
</p>

<p>
  By example, imagine that a dropdown is disabled and you want to highlight
  some other element in the form that the user must enable first.
</p>

{{#code-sample hbs="trigger-events-3.hbs" js="trigger-events-3-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-sample}}

{{!-- <p>
  Ember Power Calendar aims to be very customizable and because of that it also has to be very explicit
  about its behaviour, even if that makes it slightly verbose.
</p>

<p>
  The data flow from the app to the addon is strictly unidirectional. Data comes into the component,
  and actions are fired from the inside. The user must handle those actions in order for <strong>anything</strong>
  to happen.
</p>

<p>Let's start with the basics, adding month navigation.</p>

<h3><code>onCenterChange</code></h3>

<p>
  In the previous section we mentioned that if you pass <code>center=someDate</code> to the component, that
  month is displayed. If that option gets updates the calendar will render the new month. That means that you can create
  your own interface to navigate months, it only has to update the <code>center</code> property.
</p>

<p>
  However, it would be inconvenient to force everyone to do that, so if you pass <code>onCenterChange</code> action to
  the component, the <code>calendar.nav</code> component gets some built-in controls to navigate to the previous and next month.
  Use that action to update the displayed month and you have a navigable calendar!
</p>

{{#code-sample hbs="action-handling-1.hbs" as |partialName|}}
  {{partial partialName}}
{{/code-sample}}

<p>
  Making this interaction so explicit might seem verbose. It does force you to type a few characters for the simplest use case, but in exchange makes some usages that are
  usually very hard to implement extremely simple.
</p>

<p>
  For example, imagine that changing to a different month needs to make an ajax call to the server to gather
  all the events that are going to happen that month (we haven't seen how to display events on the calendar,
  but use your imagination) before showing the next month. While those events are loaded,
  we want to hold changing the month and show a loading state with an animated spinner.
</p>

<p>It doesn't seem like the kind of thing you'd dare to attempt with bootstrap-datepicker, right?</p>

{{#code-sample hbs="action-handling-2.hbs" js="action-handling-2-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-sample}}

<p>
  No black magic. Just the way you usually manage sync actions in your own code. Ember Power Calendar is
  promise-aware and task-aware, all the way down.
</p>

<h3><code>onSelect</code></h3>

<p>
  One very common use case of a calendar is to select one (or many) days. For that purpose it exposes an <code>onSelect</code>
  action that is called when the user clicks (or presses Enter over) a day.
</p>

<p>
  That action is fired with a <code>day</code> object as first argument. This object built by Ember Power Calendar
  contains many useful information that we will explore in detail, but for now we'll hold to the idea that it
  has a <code>date</code> property that contains a native <code>Date</code> object and a <code>moment</code> property
  that contains the same value but wrapped by <em>MomentJS</em>, so you can use the one you prefer.
</p>

<p>
  Like with the previous action, it's your responsibility to react to this action, but in the most typical case you
  just want to update the <code>selected</code> value. Let's see how to do it, and we are going to use the <code>momentjs</code>
  version of the date.
</p>

<p>Go, click one day.</p>

{{#code-sample hbs="action-handling-3.hbs" js="action-handling-3-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-sample}}

<p>
  You will notice a couple more things happening here.
</p>

<p>
  To begin with, the days of the calendar highlight when you hover them. This is because the presence of an
  <code>onSelect</code> action makes the component enter an interactive mode, which adds a class to it.
</p>

<p>
  Also, if you inspect the html, you'll see the the days are now <code>&lt;button&gt;</code>s instead of <code>&lt;div&gt;</code>s.
  This, besides of making them clickable to select a day, makes them focusable, which is important to make
  the component accesible. The currently focused day is shown with a blue underline, and once one day is focused
  you can use the arrows, <kbd>TAB</kbd>, <kbd>ENTER</kbd> and <kbd>SPACE</kbd> keys to move around and interact with the component.
</p>


<p>
  This action is fired when the selection changes, but the selection doesn't need to be a single date.
  It can be a range or a set of sparse dates! The next page is all about this topic.
</p>


<div class="doc-page-nav">
  <a href={{href-to 'public-pages.docs.how-to-use-it'}} class="doc-page-nav-link-prev">&lt; How to use it</a>
  <a href={{href-to 'public-pages.docs.range-selection'}} class="doc-page-nav-link-next">Date ranges &gt;</a>
</div>
 --}}