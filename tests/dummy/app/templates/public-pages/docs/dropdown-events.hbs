<h1 class="doc-page-title">Dropdown events</h1>

<p>
  Although the top-level component is tagless, it does fire a few events
  that you can use to react to changes in the state of the dropdown.
</p>

<p>
  This has no mistery.
</p>

<h3><code>onOpen(dropdown, event?)</code></h3>

<p>
  Pretty self explainatory. The <code>dropdown</code> argument is the signature
  is the public API of the component. The <code>event</code> argument will be passed if
  this event is fired as a consecuence of another event (p.e. a click), but will be
  undefined if it it was fired programately.
</p>

<p>What kind of things you can do with this event?</p>

<p>
  In general when you want to do something outside the component when this loads.
  By example, you can delay the loading of some data until the dropdown is opened.
</p>

{{#code-sample hbs="dropdown-events-1.hbs" js="dropdown-events-1-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-sample}}

<p>
  There is something you should know about this hook: If you <code>return false;</code>
  from it you will prevent the component from opening.
</p>

<p>
  Let's use this feature along with the public API and event received as aguments to do a
  nifty trick. We are going to iterate over the example above so we prevent
  the component from opening, load the users and once loaded we open it.
</p>

{{#code-sample hbs="dropdown-events-2.hbs" js="dropdown-events-2-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-sample}}

<p><em><small>For the record, I don't think this is good UX</small></em></p>

<h3><code>onClose(dropdown, event?)</code></h3>

<p>
  Symetrically, you can perform on action when the dropdown is closed. By example, save
  the a user selection, and you can also <code>return false</code> to prevent the component
  from closing.
</p>

<p>
  Example: Create a dropdown with some checkboxes inside, and don't allow to close it
  until on checkbox is selected
</p>

{{#code-sample hbs="dropdown-events-3.hbs" js="dropdown-events-3-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-sample}}

<p>Cruel, isn't it?</p>


<h3><code>onFocus(dropdown, event?)</code></h3>

<p>
  This is the event that must fired when something insinde the dropdown gets the focus.
  Regularly this will be fired when the trigger gets the focus, but you can also trigger
  it programatically from other elements and use the event's <code>target</code> to disambiguate.
</p>

<p>
  The most common use case of this hook is to automatically open the dropdown on focus.
</p>

{{#code-sample hbs="dropdown-events-4.hbs" js="dropdown-events-4-js.js" as |partialName|}}
  {{partial partialName}}
{{/code-sample}}

<p>
  Those were the events fired by the top-level component, now lets go deep on the
  events that are fired by the trigger.
</p>

<div class="doc-page-nav">
  <a href={{href-to 'public-pages.docs.how-to-use-it'}} class="doc-page-nav-link-prev">&lt; How to use it</a>
  <a href={{href-to 'public-pages.docs.trigger-events'}} class="doc-page-nav-link-next">Trigger events &gt;</a>
</div>